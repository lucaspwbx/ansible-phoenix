---
# tasks
- name: install essential packages
  apt: pkg={{ item }} update_cache=yes cache_valid_time=3600
  become: true
  become_method: sudo
  with_items:
    - build-essential
    - libncurses5-dev
    - libssl-dev
    - fop
    - xsltproc
    - unixodbc-dev
    - postgresql
    - postgresql-contrib
    - npm
    - libpq-dev
    - python-psycopg2
    - git

- name: check if node source is downloaded
  shell: ls {{ node_downloaded }}
  register: node_downloaded
  ignore_errors: yes

- name: check if erlang source is downloaded
  shell: ls {{ erlang_downloaded }}
  register: erlang_downloaded
  ignore_errors: yes

- name: check if elixir source is downloaded
  shell: ls {{ elixir_downloaded }}
  register: elixir_downloaded
  ignore_errors: yes

- name: download node src
  get_url:
    url: "{{ node_src }}"
    dest: "{{ download_path }}"
  when: node_downloaded|failed

- name: download erlang src
  get_url:
    url: "{{ erlang_src }}"
    dest: "{{ download_path }}"
  when: erlang_downloaded|failed

- name: download elixir src
  get_url:
    url: "{{ elixir_src }}"
    dest: "{{ download_path }}"
  when: elixir_downloaded|failed

- name: check if node source is unarchived
  shell: ls /tmp/node-v{{ node_version }}-{{ node_architecture }}
  register: node_unarchived
  ignore_errors: yes

- name: check if erlang source is unarchived
  shell: ls /tmp/otp_src_{{ erlang_version }}
  register: erlang_unarchived
  ignore_errors: yes

- name: check if elixir source is unarchived
  shell: ls /tmp/elixir-{{ elixir_version }}
  register: elixir_unarchived
  ignore_errors: yes

- name: unarchive nodejs
  command: tar -xvf node-v7.1.0-linux-x64.tar.xz
  args:
    chdir: /tmp
  register: node_unarchived
  when: node_unarchived|failed

- name: unarchive erlang
  command: tar -xvf otp_src_19.1.tar.gz 
  args:
    chdir: /tmp
  register: erlang_unarchived
  when: erlang_unarchived|failed

- name: unarchive elixir
  command: tar -xvf elixir-1.3.4.tar.gz
  args:
    chdir: /tmp
  register: elixir_unarchived
  when: elixir_unarchived|failed

- name: add nodejs symlinks
  become: true
  become_method: sudo
  file:
    src: /tmp/node-v7.1.0-linux-x64/bin/{{ item }}
    dest: /usr/bin/{{ item }}
    state: link
    force: yes
  with_items:
    - node
    - npm
  register: node_symlinked
  when: node_unarchived|success

- name: check if erlang is installed
  shell: which erl
  register: erlang_installed
  ignore_errors: true

- name: build erlang
  become: true
  become_method: sudo
  shell: "{{ item }}"
  args:
    chdir: /tmp/otp_src_{{ erlang_version }}
  with_items:
    - ./configure --prefix=/usr/local
    - make
    - make install
  when: erlang_installed|failed

- name: check if elixir is installed
  shell: elixir -v
  register: elixir_installed
  ignore_errors: true

- name: build elixir
  shell: make
  become: true
  become_method: sudo
  args:
    chdir: /tmp/elixir-{{ elixir_version }}
  environment:
    LC_ALL: "{{ locale }}"
    LANG: "{{ locale }}"
    LANGUAGE: "{{ locale }}"
  when: elixir_installed|failed

- name: add elixir and mix symlinks 
  file:
    src: /tmp/elixir-{{ elixir_version }}/bin/{{ item }}
    dest: /usr/bin/{{ item }}
    state: link
    force: yes
  with_items:
    - elixir
    - mix
  become: true
  become_method: sudo

- name: ensure postgresql is started
  service:
    name: postgresql
    state: started
    enabled: yes

- name: create role for user
  postgresql_user:
    name: "{{ database_user }}"
    password: "{{ database_pass }}"
  become: true
  become_user: postgres

- name: create db
  postgresql_db:
    name: "{{ database_name }}"
    owner: "{{ database_user }}"
    lc_collate: "{{ locale }}"
    lc_ctype: "{{ locale }}"
    encoding: UTF-8
    template: template0
  become: true
  become_user: postgres

- name: add public key
  copy:
    src: "{{ local_public_key }}"
    dest: "{{ remote_public_key }}"
    mode: 0644

- name: add private key
  copy:
    src: "{{ local_private_key }}"
    dest: "{{ remote_private_key }}"
    mode: 0600

- name: checkout repo
  git:
    repo: "{{ app_repo }}"
    dest: "{{ app_path }}"
    accept_hostkey: yes
    key_file: "{{ remote_private_key }}"

- name: mix deps.get && mix deps.compile
  shell: "{{ item }}"
  args:
    chdir: "{{ app_path }}"
  environment:
    LC_ALL: "{{ locale }}"
    LANG: "{{ locale }}"
    LANGUAGE: "{{ locale }}"
  with_items:
    - mix local.hex --force
    - mix local.rebar --force
    - mix deps.get --only prod
    - mix deps.compile

- name: mix compile
  shell: mix compile
  args:
    chdir: "{{ app_path }}"
  environment:
    MIX_ENV: prod
    LC_ALL: "{{ locale }}"
    LANG: "{{ locale }}"
    LANGUAGE: "{{ locale }}"

- name: mix ecto.migrate
  shell: mix ecto.migrate
  args:
    chdir: "{{ app_path }}"
  environment:
    DB_USERNAME: "{{ database_user }}"
    DB_PASSWORD: "{{ database_pass }}"
    MIX_ENV: prod
    LC_ALL: "{{ locale }}"
    LANG: "{{ locale }}"
    LANGUAGE: "{{ locale }}"

- name: npm install
  shell: npm install
  args:
    chdir: "{{ app_path }}"

- name: brunch build production
  shell: .{{ brunch_path }}/brunch b -p
  args:
    chdir: "{{ app_path }}"

- name: mix phoenix digest & mix release --env=prod
  shell: "{{ item }}"
  args:
    chdir: "{{ app_path }}"
  environment:
    MIX_ENV: prod
    LC_ALL: "{{ locale }}"
    LANG: "{{ locale }}"
    LANGUAGE: "{{ locale }}"
  with_items:
    - mix phoenix.digest
    - mix release --env=prod

- name: start app daemon
  shell: ./{{ app_name }} start
  args:
    chdir: "{{ release_path }}"
  environment:
    PORT: "{{ app_port }}"
    LC_ALL: "{{ locale }}"
    LANG: "{{ locale }}"
    LANGUAGE: "{{ locale }}"
